/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ConexionBD;
import controller.DatosBcg;
import function.Tiempo;
import function.clsExportarExcel;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import model.TablaBcg;
import model.Usuario;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import rojerusan.RSPanelsSlider;

/**
 *
 * @author JMB
 */
public class dashboard extends javax.swing.JFrame implements Runnable {

    Calendar calendario;
    String hora, minutos, segundos, ampm;
    Thread h1;
    static boolean maximizar = true;
    int xMouse;
    int yMouse;
    private DatosBcg cldb;
    clsExportarExcel obj;
    Usuario usuario;
    static int count = 0;

    public dashboard() {
        initComponents();
        Tiempo time = new Tiempo();
        lblFecha.setText(time.fecha());
        h1 = new Thread(this);
        h1.start();

        ConexionBD.Open();

        cldb = new DatosBcg();
        ArrayList<TablaBcg> list = cldb.Buscar();
        TablaBcg ob;
        DefaultTableModel mod = (DefaultTableModel) tabla.getModel();
        BigDecimal V[] = new BigDecimal[3];
        mod.setRowCount(0);
        for (int i = 0; i < list.size(); i++) {
            ob = list.get(i);
            V[0] = BigDecimal.valueOf(ob.getId());
            V[1] = ob.getUtilidadGeneral();
            V[2] = ob.getUtilidadCompetidor();
            mod.addRow(V);
        }
    }

    private XYDataset crearDatos() {

        DefaultTableModel miTableModel = (DefaultTableModel) tabla.getModel();
        int nFilas = tabla.getRowCount();
        int n = 0;
        XYSeries series = null;
        XYSeriesCollection datos = new XYSeriesCollection();
        for (int i = 1; i < nFilas; i++) {
            //initiate new series
            series = new XYSeries("p" + Integer.toString(i));
            for (int k = i; k < i + 1; k++) {
                series.add((double) tabla.getValueAt(i, 3), (double) tabla.getValueAt(i, 4));
                prueba(series);
            }

            //add series to dataset
            datos.addSeries(series);
        }

        return datos;
    }

    public XYSeriesCollection functionDataCollecter() {
        int nFilas = tabla.getRowCount();
        //a single line on a chart
        XYSeries series = null;

        //a collection of series
        XYSeriesCollection dataset = new XYSeriesCollection();

        for (int i = 1; i < nFilas; i++) {
            //initiate new series
            series = new XYSeries("p" + Integer.toString(i));
            for (int k = i; k < i + 1; k++) {
                series.add((double) tabla.getValueAt(i, 3), (double) tabla.getValueAt(i, 4));

            }
            //add series to dataset
            dataset.addSeries(series);
        }
        calcularMatrizPrueba(dataset);
        return dataset;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlHeader = new javax.swing.JPanel();
        btnExit = new javax.swing.JButton();
        btnMaximizar = new javax.swing.JButton();
        btnMinimizar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        panelBotone = new javax.swing.JPanel();
        btn1 = new rojerusan.RSButtonIconI();
        btn2 = new rojerusan.RSButtonIconI();
        pnlRoot = new javax.swing.JPanel();
        rSPanelsSlider1 = new rojerusan.RSPanelsSlider();
        pnl1 = new javax.swing.JPanel();
        btnCalcular = new javax.swing.JButton();
        btnGraficar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new rojerusan.RSTableMetro();
        pnl2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("dashboard");
        setBackground(new java.awt.Color(255, 255, 255));
        setUndecorated(true);
        setSize(new java.awt.Dimension(1000, 600));

        pnlHeader.setBackground(new java.awt.Color(255, 255, 255));
        pnlHeader.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlHeaderMouseDragged(evt);
            }
        });
        pnlHeader.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlHeaderMousePressed(evt);
            }
        });

        btnExit.setBackground(new java.awt.Color(255, 255, 255));
        btnExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Exit.png"))); // NOI18N
        btnExit.setContentAreaFilled(false);
        btnExit.setOpaque(true);
        btnExit.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Exit (2).png"))); // NOI18N
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExitMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnExitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });

        btnMaximizar.setBackground(new java.awt.Color(255, 255, 255));
        btnMaximizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Maximize.png"))); // NOI18N
        btnMaximizar.setContentAreaFilled(false);
        btnMaximizar.setOpaque(true);
        btnMaximizar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Maximize (2).png"))); // NOI18N
        btnMaximizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMaximizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMaximizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMaximizarMouseExited(evt);
            }
        });
        btnMaximizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximizarActionPerformed(evt);
            }
        });

        btnMinimizar.setBackground(new java.awt.Color(255, 255, 255));
        btnMinimizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Minimize.png"))); // NOI18N
        btnMinimizar.setContentAreaFilled(false);
        btnMinimizar.setOpaque(true);
        btnMinimizar.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Minimize (2).png"))); // NOI18N
        btnMinimizar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnMinimizarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnMinimizarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnMinimizarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnMinimizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnMaximizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnExit)
            .addComponent(btnMinimizar)
            .addComponent(btnMaximizar)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icons8-circundado-usuario-macho-tipo-4-de-la-piel-160.png"))); // NOI18N

        lblNombre.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 23)); // NOI18N
        lblNombre.setText("Nombres");

        lblApellido.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 18)); // NOI18N
        lblApellido.setText("Apellidos");

        lblFecha.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        lblFecha.setText("Fecha");

        lblHora.setFont(new java.awt.Font("Berlin Sans FB Demi", 1, 24)); // NOI18N
        lblHora.setText("Hora");
        lblHora.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApellido))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFecha, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(lblHora, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblApellido)
                    .addComponent(lblHora, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelBotone.setBackground(new java.awt.Color(255, 255, 255));

        btn1.setBackground(new java.awt.Color(255, 255, 255));
        btn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/house.png"))); // NOI18N
        btn1.setText("Inicio");
        btn1.setColorHover(new java.awt.Color(102, 102, 102));
        btn1.setColorText(new java.awt.Color(0, 0, 0));
        btn1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btn2.setBackground(new java.awt.Color(255, 255, 255));
        btn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/statistics (2).png"))); // NOI18N
        btn2.setText("Grafica");
        btn2.setColorHover(new java.awt.Color(102, 102, 102));
        btn2.setColorText(new java.awt.Color(0, 0, 0));
        btn2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBotoneLayout = new javax.swing.GroupLayout(panelBotone);
        panelBotone.setLayout(panelBotoneLayout);
        panelBotoneLayout.setHorizontalGroup(
            panelBotoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotoneLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(panelBotoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        panelBotoneLayout.setVerticalGroup(
            panelBotoneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBotoneLayout.createSequentialGroup()
                .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlRoot.setBackground(new java.awt.Color(255, 255, 255));

        rSPanelsSlider1.setBackground(new java.awt.Color(255, 255, 255));

        pnl1.setName("pnl1"); // NOI18N

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        btnGraficar.setText("Graficar");
        btnGraficar.setEnabled(false);
        btnGraficar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraficarActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Utilidad General", "Utilidad Competidor", "Tasa de Crecimiento", "Participacion Relativa", "Cuadrante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setColorBackgoundHead(new java.awt.Color(0, 0, 0));
        tabla.setColorBordeFilas(new java.awt.Color(255, 255, 255));
        tabla.setColorFilasForeground1(new java.awt.Color(0, 0, 0));
        tabla.setColorFilasForeground2(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(2);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(3).setResizable(false);
            tabla.getColumnModel().getColumn(4).setResizable(false);
            tabla.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout pnl1Layout = new javax.swing.GroupLayout(pnl1);
        pnl1.setLayout(pnl1Layout);
        pnl1Layout.setHorizontalGroup(
            pnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGraficar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCalcular)
                .addGap(27, 27, 27))
        );
        pnl1Layout.setVerticalGroup(
            pnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnl1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalcular)
                    .addComponent(btnGraficar))
                .addContainerGap())
        );

        rSPanelsSlider1.add(pnl1, "card2");

        pnl2.setName("pnl2"); // NOI18N

        javax.swing.GroupLayout pnl2Layout = new javax.swing.GroupLayout(pnl2);
        pnl2.setLayout(pnl2Layout);
        pnl2Layout.setHorizontalGroup(
            pnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        pnl2Layout.setVerticalGroup(
            pnl2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 456, Short.MAX_VALUE)
        );

        rSPanelsSlider1.add(pnl2, "card3");

        javax.swing.GroupLayout pnlRootLayout = new javax.swing.GroupLayout(pnlRoot);
        pnlRoot.setLayout(pnlRootLayout);
        pnlRootLayout.setHorizontalGroup(
            pnlRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelsSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlRootLayout.setVerticalGroup(
            pnlRootLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rSPanelsSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelBotone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBotone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlRoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        setSize(new java.awt.Dimension(1000, 600));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseEntered
        btnExit.setBackground(new Color(232, 12, 35));
    }//GEN-LAST:event_btnExitMouseEntered

    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        btnExit.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnExitMouseExited

    private void btnMaximizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMaximizarMouseEntered
        btnMaximizar.setBackground(new Color(229, 229, 229));
    }//GEN-LAST:event_btnMaximizarMouseEntered

    private void btnMaximizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMaximizarMouseExited
        btnMaximizar.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnMaximizarMouseExited

    private void btnMinimizarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMinimizarMouseEntered
        btnMinimizar.setBackground(new Color(229, 229, 229));
    }//GEN-LAST:event_btnMinimizarMouseEntered

    private void btnMinimizarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMinimizarMouseExited
        btnMinimizar.setBackground(new Color(255, 255, 255));
    }//GEN-LAST:event_btnMinimizarMouseExited

    private void btnExitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseClicked
        System.exit(0);
    }//GEN-LAST:event_btnExitMouseClicked

    private void btnMaximizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMaximizarMouseClicked
        if (maximizar) {
            dashboard.this.setExtendedState(JFrame.MAXIMIZED_BOTH);
            GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();
            dashboard.this.setMaximizedBounds(env.getMaximumWindowBounds());
            maximizar = false;
        } else {
            setExtendedState(JFrame.NORMAL);
            maximizar = true;
        }

    }//GEN-LAST:event_btnMaximizarMouseClicked

    private void btnMinimizarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnMinimizarMouseClicked
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_btnMinimizarMouseClicked

    private void pnlHeaderMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeaderMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlHeaderMousePressed

    private void pnlHeaderMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeaderMouseDragged
        if (maximizar) {
            int x = evt.getXOnScreen();
            int y = evt.getYOnScreen();

            this.setLocation(x, y);
        }
    }//GEN-LAST:event_pnlHeaderMouseDragged

    private void btnGraficarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraficarActionPerformed
        pnl2.removeAll();
        pnl2.repaint();
        try {
            crearGrafica();
//        try {
//            pnl2 = crearGrafica();
//        } catch (IOException ex) {
//            System.out.println(ex);
//        }
//        JFrame ventana = new JFrame();
//        ventana.getContentPane().add(pnl2);
//        ventana.pack();
//        ventana.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!this.btn2.isSelected()) {
            this.btn2.setSelected(true);
            this.btn1.setSelected(false);

            rSPanelsSlider1.setPanelSlider(10, pnl2, RSPanelsSlider.DIRECT.RIGHT);
        }
    }//GEN-LAST:event_btnGraficarActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        // TODO add your handling code here:
        int contadorEstrella = 0,
                contadoInterrogante = 0,
                contadorPerro = 0,
                contadorVaca = 0;
        double tc = 0, valorU1, valorU2, valorUtilidaCompetidor, cm = 0;
        try {
            DefaultTableModel miTableModel = (DefaultTableModel) tabla.getModel();
            for (int i = 1; i <= miTableModel.getRowCount() - 1; i++) {
                // Adquirimos los valores de la tabla Utilidad Actual y anterior, utilidad Competidor
                valorU1 = Double.parseDouble(miTableModel.getValueAt(i, 1).toString());
                valorU2 = Double.parseDouble(miTableModel.getValueAt(i - 1, 1).toString());
                valorUtilidaCompetidor = Double.parseDouble(miTableModel.getValueAt(i, 2).toString());
                //Calculamos la Tasa de crecimiento
                tc = (valorU1 - valorU2) / valorU2 * 100;
                //Limitar la cantidad de Decimales con Math.round
                miTableModel.setValueAt(Math.round(tc * 1e2) / 1e2, i, 3);
                //Calculamos la Participacion Relativa
                cm = valorU1 / valorUtilidaCompetidor;
                miTableModel.setValueAt(Math.round(cm * 1e2) / 1e2, i, 4);
                if (cm > 1 && tc > 0.1) {
                    miTableModel.setValueAt("Estrella", i, 5);
                    contadorEstrella++;
                } else if (cm <= 1 && tc > 0.1) {
                    miTableModel.setValueAt("Interrogante", i, 5);
                    contadoInterrogante++;
                } else if (cm <= 1 && tc <= 0.1) {
                    miTableModel.setValueAt("Perro", i, 5);
                    contadorPerro++;
                } else if (cm > 1 && tc <= 0.1) {
                    miTableModel.setValueAt("Vaca", i, 5);
                    contadorVaca++;
                }

            }
            btnGraficar.setEnabled(true);
            calcularMatriz();
//            calcularp(tc, cm);

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        if (!this.btn1.isSelected()) {
            this.btn1.setSelected(true);
            this.btn2.setSelected(false);
            rSPanelsSlider1.setPanelSlider(20, pnl1, RSPanelsSlider.DIRECT.RIGHT);
        }
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        if (!this.btn2.isSelected()) {
            this.btn2.setSelected(true);
            this.btn1.setSelected(false);

            rSPanelsSlider1.setPanelSlider(20, pnl2, RSPanelsSlider.DIRECT.RIGHT);
        }
    }//GEN-LAST:event_btn2ActionPerformed

    private void btnMaximizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximizarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMaximizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojerusan.RSButtonIconI btn1;
    private rojerusan.RSButtonIconI btn2;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGraficar;
    private javax.swing.JButton btnMaximizar;
    private javax.swing.JButton btnMinimizar;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblHora;
    public javax.swing.JLabel lblNombre;
    private javax.swing.JPanel panelBotone;
    private javax.swing.JPanel pnl1;
    private javax.swing.JPanel pnl2;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlRoot;
    private rojerusan.RSPanelsSlider rSPanelsSlider1;
    private rojerusan.RSTableMetro tabla;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while (ct == h1) {
            calcula();
            lblHora.setText(hora + ":" + minutos + ":" + segundos + ":" + ampm);
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }

    private void calcula() {
        Calendar calendario = new GregorianCalendar();
        Date horaActual = new Date();

        calendario.setTime(horaActual);
        ampm = calendario.get(Calendar.AM_PM) == Calendar.AM ? "AM" : "PM";
        if (ampm.equals("PM")) {
            int h = calendario.get(Calendar.HOUR_OF_DAY) - 12;
            hora = h > 9 ? "" + h : "0" + h;
        } else {
            hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        }
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }

    private JPanel crearGrafica() throws IOException {

        String tituloGrafica = "Matriz BCG";
        String ejeX = "Tasa de crecimiento eje x";
        String ejeY = "Participacion Relativa eje y";

        XYDataset datos = functionDataCollecter();

        boolean showLegend = true;
        boolean createURL = true;
        boolean createTooltip = true;

        JFreeChart grafica = ChartFactory.createScatterPlot(tituloGrafica,
                ejeX, ejeY, datos, PlotOrientation.HORIZONTAL,
                showLegend, createTooltip, createURL);
        ChartPanel cp = new ChartPanel(grafica);
        pnl2.add(cp);
        cp.setSize(pnl2.getSize());

        personalizarGrafica(grafica);

        //Guarda el gráfico como un archivo de imagen.
        File imagen = new File("Diagrama de Dispersion.png");
        int width = 640;
        int height = 480;

        try {
            ChartUtilities.saveChartAsPNG(imagen, grafica, width, height);
        } catch (IOException ex) {
            System.err.println(ex);
        }
        return new ChartPanel(grafica);
    }

    private JFreeChart personalizarGrafica(JFreeChart grafica) throws IOException {

        XYPlot plot = grafica.getXYPlot();
        plot.setNoDataMessage("NO HAY DATOS");

        plot.setDomainGridlineStroke(new BasicStroke(0.0f));
        plot.setDomainMinorGridlineStroke(new BasicStroke(0.0f));
        plot.setDomainGridlinePaint(Color.blue);
        plot.setRangeGridlineStroke(new BasicStroke(0.0f));
        plot.setRangeMinorGridlineStroke(new BasicStroke(0.0f));
        plot.setRangeGridlinePaint(Color.blue);

        NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();

        LogarithmicAxis rangeAxis = new LogarithmicAxis("Participacion Relativa");
        double position = 0;
        ValueMarker marker = new ValueMarker(position);
        marker.setPaint(Color.black);
        plot.addDomainMarker(marker);
        double position2 = 1.0;
        ValueMarker marker2 = new ValueMarker(position2);
        marker2.setPaint(Color.BLACK);
        plot.addRangeMarker(marker2);
        plot.setRangeAxis(rangeAxis);
        rangeAxis.setRange(5, 10.0);
//        domainAxis.setNumberFormatOverride(new DecimalFormat("##.##%"));

        grafica.getXYPlot().getRangeAxis().setUpperBound(10.0);
        grafica.getXYPlot().getRangeAxis().setLowerBound(0.1);
        grafica.getXYPlot().getRangeAxis().setInverted(true);

//        BufferedImage img = ImageIO.read(new File("src/img/BCG.png"));
//        plot.setBackgroundImage(img);
//        plot.setForegroundAlpha(0.5f);
        return grafica;
    }

    private void calcularp(double cm, double tc) {
        DefaultTableModel miTabla = (DefaultTableModel) tabla.getModel();
        double x, y;
        for (int i = 1; i < miTabla.getRowCount(); i++) {
            x = Double.parseDouble(miTabla.getValueAt(i, 3).toString());
            y = Double.parseDouble(miTabla.getValueAt(i, 4).toString());
            if (x <= 10 && x > 1) {
                System.out.println("x = " + x + ", " + "y = " + y);
                if (y > -1 && y < 0.2) {
                    System.out.println("x = " + x + ", " + "y = " + y);
                    System.out.println("esta en la region de vaca");
                }
            }
        }

    }

    private void test(XYSeries series) {
        for (int i = 0; i < series.getItems().size(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x > 1 && y <= 0.1) {
                System.out.println("Vaca");
//                System.out.println(series.getItems());
            }
            if (x <= 1 && y <= 0.1) {
//                System.out.println("Perro");
//                System.out.println(series.getItems());
            }
            if (x <= 1 && y > 0.1) {
//                System.out.println("Interrogante");
//                System.out.println(series.getItems());
            }
            if (x > 1 && y > 0.1) {
                System.out.println("Estrella");
                //System.out.println(series.getItems());
            }
            prueba(series);

        }
    }

    private void rangoVaca(XYSeries series) {
        for (int i = 0; i < series.getItems().size(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x <= 1 && y <= 0.1) {
                System.out.println("Vaca " + series.getItems());
            }
        }
    }

    private void rangoPerro(XYSeries series) {
        for (int i = 0; i < series.getItems().size(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x > 1 && y <= 0.1) {
                System.out.println("Perro " + series.getItems());
            }
        }
    }

    private void rangoInterrogante(XYSeries series) {
        for (int i = 0; i < series.getItems().size(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x <= 1 && y > 0.1) {
                System.out.println("Interrogante " + series.getItems());
            }
        }
    }

    private void rangoEstrella(XYSeries series) {
        for (int i = 0; i < series.getItems().size(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x > 1 && y > 0.1) {
                System.out.println("Estrella" + series.getItems());
            }
        }
    }

    private void prueba(XYSeries series) {
        int contadorEstrella = 0,
                contadoInterrogante = 0,
                contadorPerro = 0,
                contadorVaca = 0;
        for (int i = 0; i < series.getItemCount(); i++) {
            double y = series.getX(i).doubleValue();
            double x = series.getY(i).doubleValue();
            if (x > 1 && y > 0.1) {
                contadorEstrella++;
            } else {
                if (x <= 1 && y > 0.1) {
                    contadoInterrogante++;
                } else {
                    if (x > 1 && y <= 0.1) {
                        contadorPerro++;
                    } else {
                        if (x <= 1 && y <= 0.1) {
                            contadorVaca++;
                        }
                    }
                }
            }

        }
        System.out.println("Hay " + contadorEstrella + "Elementos estrella");
        System.out.println("Hay " + contadoInterrogante + "Elementos Interrogante");
        System.out.println("Hay " + contadorPerro + "Elementos Perro");
        System.out.println("Hay " + contadorVaca + "Elementos Vaca");

    }

    private void calcularMatrizPrueba(XYSeriesCollection dataset) {
        int contadorEstrella = 0,
                contadoInterrogante = 0,
                contadorPerro = 0,
                contadorVaca = 0;
        for (int i = 0; i < dataset.getSeriesCount(); i++) {
            for (int j = 0; j < dataset.getItemCount(i); j++) {
                double y = dataset.getX(i, j).doubleValue();
                double x = dataset.getY(i, j).doubleValue();
                if (x > 1 && y > 0.1) {
                    contadorEstrella++;
                } else if (x <= 1 && y > 0.1) {
                    contadoInterrogante++;
                } else if (x <= 1 && y <= 0.1) {
                    contadorPerro++;
                } else if (x > 1 && y <= 0.1) {
                    contadorVaca++;
                }

            }

        }
        System.out.println("Hay " + contadorEstrella + " Elementos estrella");
        System.out.println("Hay " + contadoInterrogante + " Elementos Interrogante");
        System.out.println("Hay " + contadorPerro + " Elementos Perro");
        System.out.println("Hay " + contadorVaca + " Elementos Vaca");

    }

    private void calcularMatriz() {
        String valorU1, valorU2;
        double estrellaE = 0;
        double estrellaV = 0;
        double estrellaI = 0;
        double estrellaP = 0;
        double totalEstrella = 0;
        double vacaV = 0;
        double vacaE = 0;
        double vacaI = 0;
        double vacaP = 0;
        double totalVaca = 0;
        double interroganteI = 0;
        double interroganteE = 0;
        double interroganteV = 0;
        double interroganteP = 0;
        double totalInterrogante = 0;
        double perroP = 0;
        double perroE = 0;
        double perroI = 0;
        double perroV = 0;
        double totalPerro = 0;

        try {
            DefaultTableModel miTableModel = (DefaultTableModel) tabla.getModel();
            for (int i = 1; i <= miTableModel.getRowCount() - 1; i++) {
                valorU1 = (miTableModel.getValueAt(i, 5).toString());
                valorU2 = (miTableModel.getValueAt(i + 1, 5).toString());
                if (valorU1.equals("Perro") && valorU2.equals("Perro")) {
                    perroP++;
                } else {
                    if (valorU1.equals("Estrella") && valorU2.equals("Estrella")) {
                        estrellaE++;
                    } else {
                        if (valorU1.equals("Estrella") && valorU2.equals("Vaca")) {
                            estrellaV++;
                        } else {
                            if (valorU1.equals("Estrella") && valorU2.equals("Interrogante")) {
                                estrellaI++;
                            } else {
                                if (valorU1.equals("Estrella") && valorU2.equals("Perro")) {
                                    estrellaP++;
                                } else {
                                    if (valorU1.equals("Vaca") && valorU2.equals("Vaca")) {
                                        vacaV++;
                                    } else {
                                        if (valorU1.equals("Vaca") && valorU2.equals("Estrella")) {
                                            vacaE++;
                                        } else {
                                            if (valorU1.equals("Vaca") && valorU2.equals("Interrogante")) {
                                                vacaI++;
                                            } else {
                                                if (valorU1.equals("Vaca") && valorU2.equals("Perro")) {
                                                    vacaP++;
                                                } else {
                                                    if (valorU1.equals("Interrogante") && valorU2.equals("Interrogante")) {
                                                        interroganteI++;
                                                    } else {
                                                        if (valorU1.equals("Interrogante") && valorU2.equals("Estrella")) {
                                                            interroganteE++;
                                                        } else {
                                                            if (valorU1.equals("Interrogante") && valorU2.equals("Vaca")) {
                                                                interroganteV++;
                                                            } else {
                                                                if (valorU1.equals("Interrogante") && valorU2.equals("Perro")) {
                                                                    interroganteP++;
                                                                } else {
                                                                    if (valorU1.equals("Perro") && valorU2.equals("Estrella")) {
                                                                        perroE++;
                                                                    } else {
                                                                        if (valorU1.equals("Perro") && valorU2.equals("Interrogante")) {
                                                                            perroI++;
                                                                        } else {
                                                                            if (valorU1.equals("Perro") && valorU2.equals("Vaca")) {
                                                                                perroV++;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
        }
        System.out.println("EstrellaE: " + estrellaE);
        System.out.println("EstrellaV: " + estrellaV);
        System.out.println("EstrellaI: " + estrellaI);
        System.out.println("EstrellaP: " + estrellaP);
        totalEstrella = estrellaE + estrellaV + estrellaI + estrellaP;
        System.out.println("TOTAL ESTRELLA: " + totalEstrella);
        System.out.println("----------------------------------------");
        System.out.println("VacaV: " + vacaV);
        System.out.println("VacaE: " + vacaE);
        System.out.println("VacaI: " + vacaI);
        System.out.println("VacaP: " + vacaP);
        totalVaca = vacaV + vacaE + vacaI + vacaP;
        System.out.println("TOTAL VACA: " + totalVaca);
        System.out.println("----------------------------------------");
        System.out.println("InterroganteI: " + interroganteI);
        System.out.println("InterroganteE: " + interroganteE);
        System.out.println("InterroganteV: " + interroganteV);
        System.out.println("InterroganteP: " + interroganteP);
        totalInterrogante = interroganteI + interroganteE + interroganteV + interroganteP;
        System.out.println("TOTAL INTERROGANTE: " + totalInterrogante);
        System.out.println("----------------------------------------");
        System.out.println("PerroP: " + perroP);
        System.out.println("PerroE: " + perroE);
        System.out.println("PerroI: " + perroI);
        System.out.println("PerroV: " + perroV);
        totalPerro = perroP + perroE + perroI + perroV;
        System.out.println("TOTAL PERRO: " + totalPerro);
        MatrizMarkov(estrellaE, estrellaV, estrellaI, estrellaP,
                totalEstrella, vacaV, vacaE, vacaI, vacaP, totalVaca,
                interroganteI, interroganteE, interroganteV, interroganteP,
                totalInterrogante, perroP, perroE, perroI, perroV, totalPerro);
    }

    public double dividir(double a, double b) {
        double respuesta = 0;
        if (b != 0) {
            respuesta = a / b;
        }
        return respuesta;
    }

    private void MatrizMarkov(double estrellaE, double estrellaV,
            double estrellaI, double estrellaP, double totalEstrella,
            double vacaV, double vacaE, double vacaI, double vacaP,
            double totalVaca, double interroganteI, double interroganteE,
            double interroganteV, double interroganteP, double totalInterrogante,
            double perroP, double perroE, double perroI, double perroV, double totalPerro) {
        double[][] matriza = {{dividir(estrellaE, totalEstrella),
            dividir(estrellaV, totalEstrella),
            dividir(estrellaI, totalEstrella), dividir(estrellaP, totalEstrella)},
        {dividir(vacaE, totalVaca), dividir(vacaV, totalVaca),
            dividir(vacaI, totalVaca), dividir(vacaP, totalVaca)},
        {dividir(interroganteE, totalInterrogante),
            dividir(interroganteV, totalInterrogante),
            dividir(interroganteI, totalInterrogante), dividir(interroganteP, totalInterrogante)},
        {dividir(perroE, totalPerro), dividir(perroV, totalPerro),
            dividir(perroI, totalPerro), dividir(perroP, totalPerro)}};
        System.out.println("MATRIZ MARKOV");
        JTextArea jama = new JTextArea();
        jama.setEditable(false);
        jama.setText("                                      Matriz Markov\n");
        for (int x = 0; x < matriza.length; x++) {
            for (int y = 0; y < matriza[x].length; y++) {
                System.out.print(matriza[x][y] + "\t");
                jama.append(matriza[x][y] + "\t");

            }
            jama.append("\n");
            System.out.println("");
        }
        ElevaMatriz(matriza, 3);
        //multiply(matriza, matriza);
        JOptionPane.showMessageDialog(null, jama, "Matriz MARKOV", JOptionPane.INFORMATION_MESSAGE);

    }

    public static double[][] multiply(double[][] a, double[][] b) {
        Random r = new Random();
        int randomInt = r.nextInt(50) + 1;
        System.out.println("MATRIZ MARKOV RESULTANTE multiplicacion por ella misma");
        JTextArea jama = new JTextArea();
        jama.setEditable(false);
        jama.setText("                                      Matriz Markov\n");
        double[][] c = new double[a.length][b[0].length];
        // se comprueba si las matrices se pueden multiplicar
        if (a[0].length == b.length) {
            for (int i = 0; i < a.length; i++) {
                for (int j = 0; j < b[0].length; j++) {
                    for (int k = 0; k < a[0].length; k++) {
                        // aquí se multiplica la matriz
                        c[i][j] += a[i][k] * b[k][j];
                    }
                    System.out.print(c[i][j] + "\t");
                }
                System.out.println("");
            }
        }
        /**
         * si no se cumple la condición se retorna una matriz vacía
         */
        ElevaMatriz(c, 2);
        return c;
    }

    private static void MatrizExponencial(double a[][]) {
        System.out.println("Matriz Elevada");
        for (int x = 0; x < a.length; x++) {
            for (int y = 0; y < a[x].length; y++) {

                System.out.print(Math.pow(a[x][y], 4) + "\t");
            }
            System.out.println("");
        }
    }

    private static void ElevaMatriz(double matriz[][], double potencia) {
        System.out.println("Matriz Elevada");
        for (int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[i].length; j++) {
                matriz[i][j] = Math.pow(matriz[i][j], potencia);
                System.out.print(matriz[i][j] + "\t");
            }
            System.out.println("");
        }

    }

}
